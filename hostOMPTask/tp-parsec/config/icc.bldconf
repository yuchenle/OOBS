#!/bin/bash
#
# icc.bldconf - file containing global information necessary to build
#               PARSEC with the Intel C compiler
#
# Copyright (C) 2006-2009 Princeton University
# Written by Christian Bienia (Initial version)
#            Christian Fensch (Sparc/Solaris port)

# Compilation and linking options
# These are the global options we'll use to build the benchmark suite. Each
# package also has a local build configuration file defining the exact
# arguments and environment to use.


# Determine OS-specific paths and prefixes
# We first determine the various directories typically used for the GNU
# binaries, then we use that information to define the binary locations.
# The values for Linux are at the end and also the default values.

# Get default gcc version in order to include the right c++ libs
gcc_version=$(gcc -dumpversion)

# Sometines we need to indicate a specific version of gcc to use:
# on comet, the default gcc version (5.4.0) is too new for our current icc version (14.0.2)
# $ icc -v
# icc version 14.0.2 (gcc version 4.8.0 compatibility)
# So we need to force the gcc_version to use here back to 4.8
# it should not affect things on andromeda because andromeda's default gcc is 4.8
# [2017/05/30] icc has been upgraded to version 17, so no longer need to force gcc version
#gcc_version=4.8

case "${OSTYPE}" in
*solaris*)
  # Solaris case

  # Solaris-specific variables
  # SFW_HOME is installation root of SFW (Solaris FreeWare)
  export SFW_HOME="/usr/sfw"

  # CC_HOME is the installation root of the C compiler
  export CC_HOME="/opt/intel"
  # GCC_HOME is installation root of the GNU C compiler
  export GCC_HOME="/usr/local/gcc-${gcc_version}"
  # BINUTIL_HOME is installation root of the GNU binutils
  export BINUTIL_HOME="/usr/local"
  # GNUTOOL_HOME is installation root of the GNU tools
  export GNUTOOL_HOME="${SFW_HOME}"
  # BINARY_PREFIX is the string which is used as prefix for the GNU binaries
  export BINARY_PREFIX="g"
;;
*)
  # Linux + default case

  # CC_HOME is installation root of the C compiler
  #export CC_HOME="/opt/intel"
  export CC_HOME="/opt/intel/compilers_and_libraries_2017.1.132/linux"
  # GCC_HOME is installation root of the GNU C compiler
  export GCC_HOME="/usr"
  # BINUTIL_HOME is installation root of the GNU binutils
  export BINUTIL_HOME="/usr"
  # GNUTOOL_HOME is installation root of the GNU tools
  export GNUTOOL_HOME="/usr"
  # BINARY_PREFIX is the string which is used as prefix for the GNU binaries
  export BINARY_PREFIX=""
;;
esac

# Compilers and preprocessors
export CC="${CC_HOME}/bin/intel64/icc"
export CXX="${CC_HOME}/bin/intel64/icpc"
export CPP="${CC_HOME}/bin/intel64/icpc -E"
export CXXCPP=""

# GNU Binutils
export LD="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ld"
export AS="${BINUTIL_HOME}/bin/${BINARY_PREFIX}as"
export AR="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ar"
export RANLIB="${BINUTIL_HOME}/bin/${BINARY_PREFIX}ranlib"
export STRIP="${BINUTIL_HOME}/bin/${BINARY_PREFIX}strip"

# GNU Tools
export M4="${GNUTOOL_HOME}/bin/${BINARY_PREFIX}m4"
export MAKE="${GNUTOOL_HOME}/bin/${BINARY_PREFIX}make"

# Arguments to use

# For using the default gcc
export CFLAGS="-O3 -funroll-loops -qopt-prefetch"
export CXXFLAGS="-O3 -funroll-loops -qopt-prefetch -fpermissive -fno-exceptions"

# For using a specified version of gcc, indicate gcc_version above
#export CFLAGS="-gcc-name=${GCC_HOME}/bin/gcc-${gcc_version} -gcc -I${GCC_HOME}/include/c++/${gcc_version} -I${GCC_HOME}/include/x86_64-linux-gnu/c++/${gcc_version} -O3 -funroll-loops -qopt-prefetch"
#export CXXFLAGS="-gxx-name=${GCC_HOME}/bin/g++-${gcc_version} -gcc -I${GCC_HOME}/include/c++/${gcc_version} -I${GCC_HOME}/include/x86_64-linux-gnu/c++/${gcc_version} -O3 -funroll-loops -qopt-prefetch -fpermissive -fno-exceptions"

export CPPFLAGS=""
export CXXCPPFLAGS=""
export LDFLAGS="-L${CC_HOME}/compiler/lib/intel64 -Wl,-R${CC_HOME}/compiler/lib/intel64"
export LIBS=""
export EXTRA_LIBS=""

# OS-specific arguments
case "${OSTYPE}" in
*solaris*)
  CFLAGS="${CFLAGS} -I${SFW_HOME}/include"
  CXXFLAGS="${CXXFLAGS} -I${SFW_HOME}/include"
  LDFLAGS="${LDFLAGS} -L${SFW_HOME}/lib -Wl,-R${SFW_HOME}/lib"
  ;;
esac

# Add PARSEC version to compiler flags
if [ -f "${PARSECDIR}/version" ]; then
  CFLAGS="${CFLAGS} -DPARSEC_VERSION=$(${CAT} ${PARSECDIR}/version)"
  CXXFLAGS="${CXXFLAGS} -DPARSEC_VERSION=$(${CAT} ${PARSECDIR}/version)"
fi

# Java
export JAVA_HOME="/usr"
export JAVAC="${JAVA_HOME}/bin/javac"

# Version numbers
CC_ver=$(${CC} --version)
CXX_ver=$(${CXX} --version)
LD_ver=$(${LD} --version)
JAVAC_ver=$(${JAVAC} -version 2>&1)

# Proclaim version for consecutive conf, and Makefile
export platform=i

# Some packages like tbblib need icc to be found in PATH
PATH="${CC_HOME}/bin/intel64:${PATH}"
